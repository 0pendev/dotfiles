* Melpa default configuration
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
			(not (gnutls-available-p))))
	   (proto (if no-ssl "http" "https")))
      (when no-ssl
	(warn "\
    Your version of Emacs does not support SSL connections,
    which is unsafe because it allows man-in-the-middle attacks.
    There are two things you can do about this warning:
    1. Install an Emacs version that does support SSL and be safe.
    2. Remove this warning from your init file so you won't see it again."))
      ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
      (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
      ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
      (when (< emacs-major-version 24)
	;; For important compatibility libraries like cl-lib
	(add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
    (package-initialize)
  #+END_SRC
* Use-package
  #+BEGIN_SRC emacs-lisp
    (eval-when-compile
      (require 'use-package))
  #+END_SRC
* Setting up UTF-8
  #+BEGIN_SRC emacs-lisp
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (when (display-graphic-p)
       (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
  #+END_SRC
* UI/UX
** As simple as possible
   #+BEGIN_SRC emacs-lisp
     (if (display-graphic-p)
	  (scroll-bar-mode -1))
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (setq inhibit-startup-screen t)
   #+END_SRC
** Modeline
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
	   :ensure t
	   :defer t
	   :hook (after-init . doom-modeline-init))
   #+END_SRC
** sidebar
   #+BEGIN_SRC emacs-lisp
     (use-package hide-mode-line
       :ensure t)

     (use-package ibuffer-sidebar
       :ensure t
       :config
       (add-hook 'ibuffer-sidebar-mode-hook 'hide-mode-line-mode)
       (global-set-key [f8] 'ibuffer-sidebar-toggle-sidebar))
   #+END_SRC
* Org-mode
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :config
       (setq org-src-fontify-natively t)
       (setq org-todo-keywords '((sequence "TODO(t)" "IN WORK(w)" "|" "DONE(d)" "CANCELED(c)"))))
     (use-package org-re-reveal
       :ensure t
       :after org)
   #+END_SRC
* Elfeed
  #+BEGIN_SRC emacs-lisp
    (use-package elfeed
      :ensure t
      :config
      (setq elfeed-feeds
	    '(;; ANSSI
	      "https://www.ssi.gouv.fr/feed/actualite/"
	      "https://www.ssi.gouv.fr/feed/publication/"
	      "https://www.ssi.gouv.fr/feed/qualification/"
	      "https://www.ssi.gouv.fr/feed/certification_cc/"
	      "https://www.ssi.gouv.fr/feed/certification_cspn/"
	      "https://www.ssi.gouv.fr/feed/guide/"
	      ;;CoreOS
	      "https://twitrss.me/twitter_user_to_rss/?user=coreos"
	      "https://twitrss.me/twitter_user_to_rss/?user=CoreOSSecurity"
	      ;;Fedora
	      "https://fedoramagazine.org/feed/"
	      ;;OpenSuse
	      "https://news.opensuse.org/feed/"
	      ;;Hacker News
	      "https://news.ycombinator.com/rss")))
  #+END_SRC

* Programmation
** Général
*** Autocompletion
    #+BEGIN_SRC emacs-lisp
      (use-package company
	:ensure t
	:config
	(define-key company-mode-map [C-tab] 'company-complete))
    #+END_SRC
*** Code snippets
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
	:ensure t
	:config
	(yas-global-mode 1))
    #+END_SRC

** HTML
   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :ensure t
       :config
       (add-hook 'html-mode-hook 'emmet-mode))
   #+END_SRC
