* Melpa default configuration
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
    (package-initialize)
  #+END_SRC
* Dependencies
  #+BEGIN_SRC emacs-lisp
    (defun ensure-package-installed (&rest packages)
      (mapcar
       (lambda (package)
	 (if (package-installed-p package)
	     nil
	   (package-install package)))
       packages))

    (or (file-exists-p package-user-dir)
	(package-refresh-contents))

    (defun install-dependencies ()
      (ensure-package-installed 'aggressive-fill-paragraph 'all-the-icons 'company 'company-c-headers 'company-emacs-eclim 'company-irony-c-headers 'company-go 'company-irony 'company-jedi 'doom-modeline 'doom-themes 'eclim 'elfeed 'emmet-mode 'go-snippets 'gradle-mode 'irony 'js2-mode 'markdown-mode 'neotree 'org-bullets 'org-re-reveal 'python-docstring 'use-package 'yasnippet 'yasnippet-snippets 'web-mode 'writeroom-mode 'zlc 'zerodark-theme)
      (package-initialize))

    (install-dependencies)
  #+END_SRC
* Use-package
  #+BEGIN_SRC emacs-lisp
    (eval-when-compile
      (require 'use-package))
  #+END_SRC
* Setting up UTF-8
  #+BEGIN_SRC emacs-lisp
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (when (display-graphic-p)
       (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
  #+END_SRC
* UI/UX
** As simple as possible
   #+BEGIN_SRC emacs-lisp
     (if (display-graphic-p)
	  (scroll-bar-mode -1))
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (setq inhibit-startup-screen t)
   #+END_SRC
** Modeline
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
	   :ensure t
	   :defer t
	   :hook (after-init . doom-modeline-init))
   #+END_SRC
** Neotree
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :config
       (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
       (global-set-key [f8] 'neotree-toggle))
   #+END_SRC
** zlc
   #+BEGIN_SRC emacs-lisp
     (use-package zlc
       :config
       (zlc-mode t))
   #+END_SRC
* Programmation
** Général
*** Autocompletion
    #+BEGIN_SRC emacs-lisp
      (use-package company
	:config
	(define-key company-mode-map [C-tab] 'company-complete))
    #+END_SRC
*** Code snippets
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
	:config
	(yas-global-mode 1))
    #+END_SRC
** C/C++
*** Autocompletion
   #+BEGIN_SRC emacs-lisp
     (use-package irony
       :after company
       :config
       (add-to-list 'company-backends 'company-c-headers) 
       (add-to-list 'company-backends 'company-irony)
       (add-to-list 'company-backends 'company-irony-c-headers)
       (add-hook 'c-mode-hook (lambda()
				(company-mode)
				(irony-mode))))
    #+END_SRC
*** Compilation
    *Installed clang on the machine. It will be used by company-mode.*
** HTML
*** Emmet-mode
    #+BEGIN_SRC emacs-lisp
      (add-hook 'html-mode-hook 'emmet-mode)
    #+END_SRC
** Javascript
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
	:after (company)
	:config
	(add-hook 'js2-mode-hook 'company-mode)
	(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
    #+END_SRC
** JEE
*** Web-mode
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
	:after (company)
	:config
	(add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
	(add-hook 'web-mode 'company-mode))
    #+END_SRC
** Go
*** Autocompletion
    #+BEGIN_SRC emacs-lisp
      (use-package company-go
	:after (company)
	:config
	(add-hook 'before-save-hook 'gofmt-before-save)
	(add-to-list 'company-backends 'company-go)
	(add-hook 'go-mode-hook 'company-mode))
    #+END_SRC
    /It needs the gocode deamon to be installed on the machine./
*** Snippets
    We install the go-snippets package.
*** GOPATH
    #+BEGIN_SRC emacs-lisp
      (defun setgopath(path)
	 "Used in my golang workflow"
	 (interactive "sPath: \n")
	 (setenv "GOPATH" path)
	 (setenv "PATH"
		 (concat
		  (getenv "PATH") ":"
		  (getenv "GOPATH")))
	 (message "Set $GOPATH to : %s" path))
    #+END_SRC
** Python
    #+BEGIN_SRC emacs-lisp
      (use-package python
	:after company
	:config
	(setq python-shell-interpreter "python3")
	(add-to-list 'company-backends 'company-jedi)
	(add-to-list 'company-backends 'company-files)
	(add-hook 'python-mode-hook (lambda ()
				      (company-mode)
				      (python-docstring-mode))))
    #+END_SRC
** JAVA
*** Gradle
    #+BEGIN_SRC emacs-lisp
      (use-package gradle-mode
	:config
	:disabled
	(add-hook 'java-mode-hook 'gradle-mode))
    #+END_SRC
*** Eclim
    #+BEGIN_SRC emacs-lisp
      (defun eclim-config()
	((company)
	 (setq eclimd-autostart t)))
      (use-package eclim
	:config
	(custom-set-variables
	  '(eclim-eclipse-dirs '("~/Softwares/Eclipse/eclipse/eclipse"))
	  '(eclim-executable ".p2/pool/plugins/org.eclim_2.8.0/bin/eclim"))
	(company-emacs-eclim-setup)
	(add-hook 'java-mode-hook 'eclim-config))
    #+END_SRC
* Elfeed
  #+BEGIN_SRC emacs-lisp
    (use-package elfeed
      :config
      (setq elfeed-feeds
	    '(;; ANSSI
	      "https://www.ssi.gouv.fr/feed/actualite/"
	      "https://www.ssi.gouv.fr/feed/publication/"
	      "https://www.ssi.gouv.fr/feed/qualification/"
	      "https://www.ssi.gouv.fr/feed/certification_cc/"
	      "https://www.ssi.gouv.fr/feed/certification_cspn/"
	      "https://www.ssi.gouv.fr/feed/guide/"
	      ;;CoreOS
	      "https://twitrss.me/twitter_user_to_rss/?user=coreos"
	      "https://twitrss.me/twitter_user_to_rss/?user=CoreOSSecurity"
	      ;;Fedora
	      "https://fedoramagazine.org/feed/"
	      ;;OpenSuse
	      "https://news.opensuse.org/feed/"
	      ;;Hacker News
	      "https://news.ycombinator.com/rss")))
  #+END_SRC
* Org-mode
** TODOs
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :config
       (add-hook 'org-mode-hook 'aggressive-fill-paragraph-mode)
       (setq org-src-fontify-natively t)
       (setq org-todo-keywords '((sequence "TODO(t)" "IN WORK(w)" "|" "DONE(d)" "CANCELED(c)"))))

     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
** Reveal.js
   #+BEGIN_SRC emacs-lisp
     (use-package org-re-reveal
       :after org)
   #+END_SRC

** Latex exports
   #+BEGIN_SRC emacs-lisp
					     ; Configuration des exports d'org-mode vers PDF
     (use-package ox-latex
       :after (org)
       :config
					     ;Empecher le carctère _ d'etre traduit par une équation
       (setq org-export-with-sub-superscripts nil)
					     ; Configuration des marges
       (add-to-list 'org-latex-packages-alist '("letterpaper, portrait, lmargin=1in, rmargin=1in, bmargin=1in, tmargin=1in" "geometry"))
					     ; Configuration de la mise en page du code
					     ;ajout du package minted dans les entete
       (add-to-list 'org-latex-packages-alist '("" "minted"))
					     ;selection de minted comme environnement pour les blocs de code source
       (setq org-latex-listings 'minted)
					     ;ajout d'obtion à l'environement de minted
       (setq org-latex-minted-options
	     '(("breaklines")( "linenos")( "frame=lines")( "framesep=2mm")))
       (setq org-latex-pdf-process
	     '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")))
   #+END_SRC
