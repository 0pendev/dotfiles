* Repositories
  We add different repositories.
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
    (package-initialize) 
  #+END_SRC
* Dependencies
  The following code will check if all dependencies are installed and ask to install them if they are not.
  #+BEGIN_SRC emacs-lisp
    (defun ensure-package-installed (&rest packages)
        (mapcar
         (lambda (package)
           ;; (package-installed-p 'evil)
           (if (package-installed-p package)
               nil
             (if (y-or-n-p (format "Package %s is missing. Install it? " package))
                 (package-install package)
               package)))
         packages))

    (or (file-exists-p package-user-dir)
        (package-refresh-contents))

    (ensure-package-installed 'company 'company-c-headers 'company-go 'company-jedi 'doom-themes 'emmet-mode 'go-snippets 'js2-mode 'markdown-mode 'neotree 'yasnippet 'yasnippet-snippets 'web-mode)

    (package-initialize)

  #+END_SRC
* UI/UX
** Modification de l'interface
   We get rid of all this gui non-sense.
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -99)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC
** Modification du thème
   The following code will load the theme at each sessions (It is generated by emacs).
   #+BEGIN_SRC emacs-lisp
     (custom-set-variables
      '(compilation-message-face (quote default))
      '(cua-global-mark-cursor-color "#2aa198")
      '(cua-normal-cursor-color "#839496")
      '(cua-overwrite-cursor-color "#b58900")
      '(cua-read-only-cursor-color "#859900")
      '(custom-enabled-themes (quote (doom-spacegrey)))
      '(custom-safe-themes
        (quote
         ("0598de4cc260b7201120b02d580b8e03bd46e5d5350ed4523b297596a25f7403" "4e21fb654406f11ab2a628c47c1cbe53bab645d32f2c807ee2295436f09103c6" "a866134130e4393c0cad0b4f1a5b0dd580584d9cf921617eee3fd54b6f09ac37" "2a1b4531f353ec68f2afd51b396375ac2547c078d035f51242ba907ad8ca19da" "7666b079fc1493b74c1f0c5e6857f3cf0389696f2d9b8791c892c696ab4a9b64" "53d1bb57dadafbdebb5fbd1a57c2d53d2b4db617f3e0e05849e78a4f78df3a1b" "2af26301bded15f5f9111d3a161b6bfb3f4b93ec34ffa95e42815396da9cb560" "77c3f5f5acaa5a276ca709ff82cce9b303f49d383415f740ba8bcc76570718b9" "0846e3b976425f142137352e87dd6ac1c0a1980bb70f81bfcf4a54177f1ab495" "b5ecb5523d1a1e119dfed036e7921b4ba00ef95ac408b51d0cd1ca74870aeb14" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" default)))
      '(highlight-changes-colors (quote ("#d33682" "#6c71c4")))
      '(highlight-symbol-colors
        (--map
         (solarized-color-blend it "#002b36" 0.25)
         (quote
          ("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2"))))
      '(highlight-symbol-foreground-color "#93a1a1")
      '(highlight-tail-colors
        (quote
         (("#073642" . 0)
          ("#546E00" . 20)
          ("#00736F" . 30)
          ("#00629D" . 50)
          ("#7B6000" . 60)
          ("#8B2C02" . 70)
          ("#93115C" . 85)
          ("#073642" . 100))))
      '(hl-bg-colors
        (quote
         ("#7B6000" "#8B2C02" "#990A1B" "#93115C" "#3F4D91" "#00629D" "#00736F" "#546E00")))
      '(hl-fg-colors
        (quote
         ("#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36")))
      '(magit-diff-use-overlays nil)
      '(nrepl-message-colors
        (quote
         ("#dc322f" "#cb4b16" "#b58900" "#546E00" "#B4C342" "#00629D" "#2aa198" "#d33682" "#6c71c4")))
      '(package-selected-packages
        (quote
         (auto-complete ac-js2 powerline doom-themes company-jedi emmet-mode yasnippet-snippets solarized-theme neotree markdown-mode js2-mode go-snippets company-go company-c-headers)))
      '(pos-tip-background-color "#073642")
      '(pos-tip-foreground-color "#93a1a1")
      '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#073642" 0.2))
      '(term-default-bg-color "#002b36")
      '(term-default-fg-color "#839496")
      '(vc-annotate-background-mode nil)
      '(weechat-color-list
        (quote
         (unspecified "#002b36" "#073642" "#990A1B" "#dc322f" "#546E00" "#859900" "#7B6000" "#b58900" "#00629D" "#268bd2" "#93115C" "#d33682" "#00736F" "#2aa198" "#839496" "#657b83")))
      '(xterm-color-names
        ["#073642" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#eee8d5"])
      '(xterm-color-names-bright
        ["#002b36" "#cb4b16" "#586e75" "#657b83" "#839496" "#6c71c4" "#93a1a1" "#fdf6e3"]))
     (custom-set-faces)
   #+END_SRC
** Neotree
   NeoTree is a package that give us a quick view of our tree structure. It is common tool amongs modern editors. We toggle it with the [f8] key.
   #+BEGIN_SRC emacs-lisp
     (require 'neotree)
     (global-set-key [f8] 'neotree-toggle)
   #+END_SRC
* Programmation
** Général
*** Autocomplétion
    We start company-backend to add completion for some specific languages.
    #+BEGIN_SRC emacs-lisp
      (require 'company)
    #+END_SRC
    We bind company-complete whith [tab] when company-mode is loaded. It will start the completion manually.
    #+BEGIN_SRC emacs-lisp
      (defun company_tab_behaviour()
        (interactive)
        (indent-for-tab-command)
        (company-complete))

      (eval-after-load 'company-mode
        (define-key company-mode-map [tab] 'company_tab_behaviour))
    #+END_SRC
*** Code snippets
    For snippets we use yasnippet and yasnippet-snippets (both from melpa).
    #+BEGIN_SRC emacs-lisp
      (require 'yasnippet)
      (yas-global-mode 1)
    #+END_SRC

** C/C++
*** Autocomplétion
   We add completion for the headers by adding company-c-headers backend. And we start it at the load of c-mode.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'company-backends 'company-c-headers)
     (add-hook 'c-mode-hook 'company-mode)
   #+END_SRC
*** Compilation
    *Installed clang on the machine. It will be used by company-mode.*
** HTML
*** Emmet-mode
    Emmet-mode is a tool that helps you writte HTML code faster. 
    We initialize it when html-mode starts.
    #+BEGIN_SRC emacs-lisp
      (add-hook 'html-mode-hook 'emmet-mode)
    #+END_SRC
** Javascript
*** Autocomplétion
    We start company-mode when js2 mode is loaded.
    #+BEGIN_SRC emacs-lisp
      (add-hook 'js2-mode-hook 'company-mode)

    #+END_SRC
*** JS2 mode
    The js2 mode is a mode to edit javascript. We force emacs to use it over js-mode.
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    #+END_SRC
** JEE
*** Web-mode
    Web-mode and emmet-mode work great together to build jsp pages. Let's start them when we open a jsp file:
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
      (add-hook 'web-mode 'company-mode)
    #+END_SRC
** Go
*** Autocomplétion
    We add the go backend for company-mode. We only load it when go-mode is loaded.
    #+BEGIN_SRC emacs-lisp
      (require 'company-go)
    #+END_SRC
    We start company-mode when the go-mode is loaded.
    #+BEGIN_SRC emacs-lisp
      (add-hook 'go-mode-hook 'company-mode)
    #+END_SRC
    *It needs the golang-go and gocode deamon to be installed on the machine.*
*** Snippets
    We install the go-snippets package.
** Python
*** Autocomplétion
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'company-backends '(company-jedi company-files))
      (add-hook 'python-mode-hook 'company-mode)
    #+END_SRC
*** Snippets
* Org-mode
** Display
   First we add line wrapping in org-mode. It will be easier to write/read notes.
   #+BEGIN_SRC emacs-lisp
   (add-hook 'org-mode-hook 'visual-line-mode)
   #+END_SRC
   In a lot of org document I have code. So the next line will do the syntax highlighting in org-mode.
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC
** Latex exports
   #+BEGIN_SRC emacs-lisp
                                             ; Configuration des exports d'org-mode vers PDF
     (require 'ox-latex)
                                             ;Empecher le carctère _ d'etre traduit par une équation
     (setq org-export-with-sub-superscripts nil)
                                             ; Configuration des marges
     (add-to-list 'org-latex-packages-alist '("letterpaper, portrait, lmargin=1in, rmargin=1in, bmargin=1in, tmargin=1in" "geometry"))
                                             ; Configuration de la mise en page du code
                                             ;ajout du package minted dans les entete
     (add-to-list 'org-latex-packages-alist '("" "minted"))
                                             ;selection de minted comme environnement pour les blocs de code source
     (setq org-latex-listings 'minted)
                                             ;ajout d'obtion à l'environement de minted
     (setq org-latex-minted-options
          '(("breaklines")( "linenos")( "frame=lines")( "framesep=2mm")))
     (setq org-latex-pdf-process
           '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
   #+END_SRC
